<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://dkarim.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dkarim.com/" rel="alternate" type="text/html" /><updated>2025-09-19T00:06:12-04:00</updated><id>https://dkarim.com/feed.xml</id><title type="html">David Karim - DevOps Engineer</title><subtitle>I am a professional with over 20 years of experience in the field of tech and telecommunications.</subtitle><entry><title type="html">Deploying a Next.js app to AWS Amplify</title><link href="https://dkarim.com/deploying-to-aws-amplify/" rel="alternate" type="text/html" title="Deploying a Next.js app to AWS Amplify" /><published>2025-08-01T00:00:00-04:00</published><updated>2025-08-01T00:00:00-04:00</updated><id>https://dkarim.com/deploying-to-aws-amplify</id><content type="html" xml:base="https://dkarim.com/deploying-to-aws-amplify/"><![CDATA[<p><img src="/assets/images/2025-08-01-deploying-to-aws-amplify/aws-amplify-next.png" alt="" style="border-radius: 20px;" /></p>

<h1 id="how-to-deploy-a-nextjs-application-using-aws-amplify">How to Deploy a Next.js Application Using AWS Amplify</h1>

<p>Deploying a web application shouldn’t be a bottleneck—it should be fast, cost-effective, and scalable. If you’re working with <strong>Next.js</strong>, one of the most popular frameworks for building React applications, there’s no better way to deploy than with <strong>AWS Amplify</strong>.</p>

<p>In this post, we’ll explore:</p>
<ul>
  <li>Why AWS Amplify is a great choice for hosting your Next.js app.</li>
  <li>How it compares to other options like Vercel, Netlify, and EC2.</li>
  <li>A simple, step-by-step guide to get your app live with Amplify.</li>
</ul>

<hr />

<h2 id="why-choose-aws-amplify">Why Choose AWS Amplify?</h2>

<p><strong>AWS Amplify</strong> is a powerful platform that automates the deployment and hosting of full-stack web apps. For Next.js developers, Amplify brings several key advantages:</p>

<h3 id="speed">Speed</h3>
<ul>
  <li><strong>CI/CD built-in</strong>: Connect your GitHub repo and Amplify automatically builds and deploys on every commit.</li>
  <li><strong>SSR support</strong>: Amplify natively supports Server-Side Rendering (SSR) and Static Site Generation (SSG) for Next.js apps.</li>
  <li><strong>Global CDN</strong>: Amplify deploys your app to edge locations, ensuring low-latency access around the globe.</li>
</ul>

<h3 id="cost-efficiency">Cost Efficiency</h3>
<ul>
  <li><strong>Pay for what you use</strong>: No flat monthly fees. You only pay for build time and hosting bandwidth.</li>
  <li><strong>Generous free tier</strong>: Great for side projects or startups just getting started.</li>
  <li><strong>No need to manage infrastructure</strong>: Unlike EC2 or Fargate, you don’t need to worry about provisioning or scaling servers.</li>
</ul>

<hr />

<h2 id="amplify-vs-other-hosting-solutions">Amplify vs Other Hosting Solutions</h2>

<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>AWS Amplify</th>
      <th>Vercel</th>
      <th>Netlify</th>
      <th>AWS EC2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Ease of Setup</strong></td>
      <td>Easy</td>
      <td>Very Easy</td>
      <td>Very Easy</td>
      <td>Complex</td>
    </tr>
    <tr>
      <td><strong>SSR Support</strong></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Limited</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><strong>Custom Domains</strong></td>
      <td>Free HTTPS</td>
      <td>Free HTTPS</td>
      <td>Free HTTPS</td>
      <td>Manual Setup</td>
    </tr>
    <tr>
      <td><strong>Build Automation</strong></td>
      <td>Built-in CI/CD</td>
      <td>Built-in CI/CD</td>
      <td>Built-in CI/CD</td>
      <td>Manual</td>
    </tr>
    <tr>
      <td><strong>Pricing Model</strong></td>
      <td>Usage-based</td>
      <td>Usage-based</td>
      <td>Usage-based</td>
      <td>Pay-per-instance</td>
    </tr>
    <tr>
      <td><strong>Scalability</strong></td>
      <td>Auto-scaled</td>
      <td>Auto-scaled</td>
      <td>Auto-scaled</td>
      <td>Manual scaling</td>
    </tr>
  </tbody>
</table>

<p>While Vercel (creator of Next.js) is tightly integrated with the framework, <strong>Amplify gives you more flexibility</strong> with backend services and <strong>closer integration with the AWS ecosystem</strong>—perfect if you already use AWS services like Lambda, S3, DynamoDB, or Cognito.</p>

<hr />

<h2 id="step-by-step-deploy-a-nextjs-app-to-aws-amplify">Step-by-Step: Deploy a Next.js App to AWS Amplify</h2>

<p>Here’s how to get your app up and running on Amplify in minutes:</p>

<h3 id="step-1-push-your-app-to-github"><strong>Step 1: Push Your App to GitHub</strong></h3>
<p>Ensure your Next.js project is pushed to a Git provider like GitHub, GitLab, or Bitbucket.</p>

<p>If not already done:</p>

<p>```bash
git init
git add .
git commit -m “Initial commit”
git remote add origin https://github.com/your-username/your-repo.git
git branch -M master
git push -u origin master
```</p>

<hr />

<h3 id="step-2-log-into-the-aws-amplify-console"><strong>Step 2: Log into the AWS Amplify Console</strong></h3>
<p>Go to the <a href="https://console.aws.amazon.com/amplify/home">AWS Amplify Console</a> and click **“Create New App”.</p>

<p><img src="/assets/images/2025-08-01-deploying-to-aws-amplify/amplify-first-step.png" alt="" style="border-radius: 20px;" /></p>
<h3 id="step-3-connect-your-git-repository"><strong>Step 3: Connect Your Git Repository</strong></h3>
<ul>
  <li>Choose GitHub (or your provider of choice) and click on Next.</li>
  <li>Authenticate with GitHub and select your repository and branch.</li>
  <li>In the App Settings you will see Service Role, leave it as default: Create and use a new service role</li>
</ul>

<p>Amplify will auto-detect that you’re using a Next.js app and prefill the build settings.</p>

<p>If you click on Edit YML File, you’ll see a default <code class="language-plaintext highlighter-rouge">amplify.yml</code> file like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">frontend</span><span class="pi">:</span>
  <span class="na">phases</span><span class="pi">:</span>
    <span class="na">preBuild</span><span class="pi">:</span>
      <span class="na">commands</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">npm ci --cache .npm --prefer-offline</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">commands</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">npm run build</span>
  <span class="na">artifacts</span><span class="pi">:</span>
    <span class="na">baseDirectory</span><span class="pi">:</span> <span class="s">.next</span>
    <span class="na">files</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">**/*'</span>
  <span class="na">cache</span><span class="pi">:</span>
    <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.next/cache/**/*</span>
      <span class="pi">-</span> <span class="s">.npm/**/*</span>

</code></pre></div></div>
<p>You can tweak this file later if needed.</p>

<h3 id="step-4-review-and-deploy"><strong>Step 4: Review and Deploy</strong></h3>
<ul>
  <li>Click <strong>“Next”</strong> and review the build settings.</li>
  <li>Click <strong>“Save and Deploy”</strong>.</li>
</ul>

<p>Amplify will:</p>
<ul>
  <li>Clone your repo</li>
  <li>Install dependencies</li>
  <li>Build your app</li>
  <li>Deploy it to a globally distributed CDN</li>
</ul>

<p>Note that Amplify will select an instance type for you.</p>

<p><img src="/assets/images/2025-08-01-deploying-to-aws-amplify/amplify-instance-size-example.png" alt="" style="border-radius: 20px;" /></p>

<h3 id="step-5-view-your-live-site"><strong>Step 5: View Your Live Site</strong></h3>
<p>Once deployment finishes, you’ll get a public URL like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://master.d1234abcd.amplifyapp.com
</code></pre></div></div>

<p>You can customize the domain by attaching a custom domain in the Amplify Console (e.g., <code class="language-plaintext highlighter-rouge">www.myapp.com</code>).</p>

<h2 id="bonus-add-a-custom-domain">Bonus: Add a Custom Domain</h2>
<p>To attach your domain:</p>
<ol>
  <li>Go to the Amplify Console.</li>
  <li>Select your app → <strong>“Hosting”</strong> → <strong>“Custom Domains”</strong></li>
  <li>Add your domain (e.g., from Route53 or any registrar).</li>
  <li>Amplify will configure DNS and SSL for free.</li>
</ol>]]></content><author><name></name></author><category term="infrastructure" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/2025-08-01-deploying-to-aws-amplify/aws-amplify-next.png" /><media:content medium="image" url="https://dkarim.com/assets/images/2025-08-01-deploying-to-aws-amplify/aws-amplify-next.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From Evernote to Obsidian</title><link href="https://dkarim.com/from-evernote-to-obsidian/" rel="alternate" type="text/html" title="From Evernote to Obsidian" /><published>2025-04-14T00:00:00-04:00</published><updated>2025-04-14T00:00:00-04:00</updated><id>https://dkarim.com/from-evernote-to-obsidian</id><content type="html" xml:base="https://dkarim.com/from-evernote-to-obsidian/"><![CDATA[<p><img src="/assets/images/2025-04-14-from-evernote-to-obsidian/evernote-obsidian.png" alt="" style="border-radius: 20px;" /></p>

<h2 id="introduction">Introduction</h2>

<p>After over ten years of using Evernote I finally decided to get all my notes out and leave. Evernote was once a great note-taking app but gradually grew into an overgrown, slow, and overpriced solution. Besides the bloat, it always seemed like they kept adding features I didn’t think were core to the product.</p>

<p>Obsidian might seem overwhelming at first, but it only took me a few days to get used to it and I am now a big fan. Obsidian is stronger when used on a non-mobile device, but I am ok with that. The mobile app is still pretty good, and the community plugins really make it shine. I also work mostly out of my desk and prefer using my laptop, especially for note-taking. Also, it turns out that exporting the notes from Evernote into Obsidian was actually rather easy and the conversion process resulted in fairly good results.</p>

<h2 id="exporting-notes">Exporting Notes</h2>

<p>Evernote allows you to export your notes on a per notebook basis. The resulting <code class="language-plaintext highlighter-rouge">.enex</code> files can then be easily imported into Obsidian using the Importer community plugin. The process starts when you right-click on an Evernote notebook and select the Export notebook option:</p>

<p><img src="/assets/images/2025-04-14-from-evernote-to-obsidian/evernote-export-1.png" alt="" /></p>

<p>You can then keep the default values which keep all the attributes selected and uses the <code class="language-plaintext highlighter-rouge">.enex</code> format. Clicking on Export will generate the file. You can then repeat this process for all the notebooks.</p>

<p><img src="/assets/images/2025-04-14-from-evernote-to-obsidian/evernote-export-2.png" alt="" /></p>

<p>In Obsidian, the Importer Community Plugin can then be used to import each notebook. After the notes are imported, the Importer plugin can be disabled and you can start reviewing the notes to make sure you are satisfied with the format. In my case, I thought the conversion produced good results and I only had to make some minor adjustments. One particular adjustment, for example, was that some notes which used the <code class="language-plaintext highlighter-rouge">#</code> symbol were converted to Obsidian tags, simply putting a backslash character in front of those hash-marks fixed the issue.</p>

<p><img src="/assets/images/2025-04-14-from-evernote-to-obsidian/obsidian-import.png" alt="" /></p>

<h2 id="obsidian">Obsidian</h2>

<p>If you are a fan of markdown and prefer tools that provide more control of your data then Obsidian is a much better alternative. It has a very rich ecosystem of plugins and also feels a lot lighter as compared to the bloated mess that Evernote became.</p>]]></content><author><name></name></author><category term="tools" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/2025-04-14-from-evernote-to-obsidian/evernote-obsidian.png" /><media:content medium="image" url="https://dkarim.com/assets/images/2025-04-14-from-evernote-to-obsidian/evernote-obsidian.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hugging Face - The Github for AI</title><link href="https://dkarim.com/github-for-ai/" rel="alternate" type="text/html" title="Hugging Face - The Github for AI" /><published>2025-04-03T00:00:00-04:00</published><updated>2025-04-03T00:00:00-04:00</updated><id>https://dkarim.com/github-for-ai</id><content type="html" xml:base="https://dkarim.com/github-for-ai/"><![CDATA[<p><img src="/assets/images/2025-04-03-github-for-ai/github_hugging_face.png" alt="" style="border-radius: 20px;" /></p>

<p>While GitHub has long been the go-to repository for code sharing, version control, and collaboration among developers, Hugging Face has enabled some unique functionality for the machine learning and artificial intelligence community. At first glance, they might seem similar—both support open collaboration and versioning—but Hugging Face is specialized for AI workflows, providing tools and infrastructure specifically for model training, sharing, and deployment.</p>

<p>One of Hugging Face’s standout features is its <strong>Models</strong> hub, which acts like GitHub’s repositories, but for trained machine learning models. Here, developers and researchers can upload pre-trained models in popular formats like PyTorch, TensorFlow, and ONNX. These models are tagged, documented, and come with metadata such as usage licenses, example scripts, and supported tasks like text classification, image generation, or speech recognition. Users can search for models by task, framework, or language, making it incredibly convenient to find and reuse powerful models without starting from scratch.</p>

<p>The <strong>Datasets</strong> section on Hugging Face functions similarly to GitHub’s raw data repositories but adds an important layer of standardization and tooling. There is a <code class="language-plaintext highlighter-rouge">datasets</code> Python library which simplifies loading and accessing these datasets. This enables anyone to load, preprocess, and explore datasets quickly using familiar methods. Importantly, many datasets are designed to work seamlessly with models on the platform, supporting reproducible research and rapid experimentation.</p>

<p>Perhaps the most innovative part of Hugging Face is its <strong>Spaces</strong> feature. Spaces are essentially interactive apps or demos built using Streamlit, Gradio, or static HTML, directly embedded within the Hugging Face ecosystem. Think of it as a combination of GitHub Pages and interactive Jupyter notebooks. Developers can showcase their models in action, allowing users to test them out directly in the browser. This dramatically lowers the barrier for non-technical stakeholders or curious users to engage with cutting-edge AI tools, bridging the gap between development and real-world application.</p>

<p>While GitHub remains the gold standard for general software development collaboration, Hugging Face is rapidly becoming the GitHub for AI. It adds layers of domain-specific functionality that cater to the unique needs of machine learning practitioners, including model deployment, dataset management, and demo creation. For developers in the AI space, Hugging Face offers an environment purpose-built for the modern ML lifecycle, making it a true platform for innovation and sharing.</p>]]></content><author><name></name></author><category term="Artificial Intelligence" /><category term="in-progress" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/2025-04-03-github-for-ai/github_hugging_face.png" /><media:content medium="image" url="https://dkarim.com/assets/images/2025-04-03-github-for-ai/github_hugging_face.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Comparing Terraform Version Management Tools</title><link href="https://dkarim.com/comparing-terraform-version-management/" rel="alternate" type="text/html" title="Comparing Terraform Version Management Tools" /><published>2025-03-24T00:00:00-04:00</published><updated>2025-03-24T00:00:00-04:00</updated><id>https://dkarim.com/comparing-terraform-version-management</id><content type="html" xml:base="https://dkarim.com/comparing-terraform-version-management/"><![CDATA[<p><img src="/assets/images/2025-03-24-comparing-terraform-version-management/tfenv-tfswitch-tenv.png" alt="" style="border-radius: 20px;" /></p>

<h2 id="tenv-will-replace-the-others">tenv will replace the others</h2>

<p>When using Terraform, it’s common to rely on a version manager to easily switch between different versions across projects or environments. For years, <strong>tfenv</strong> has been the go-to solution in the community. But with the tool seeing little to no active development lately, it might be time to consider more modern alternatives.</p>

<p>Two other tools worth evaluating are <strong>tfswitch</strong>, a popular option with a user-friendly interactive mode, and the newer <strong>tenv</strong>, which is quickly gaining traction—especially for teams also adopting <strong>OpenTofu</strong>, the open-source Terraform fork.</p>

<p>Developed as part of the <a href="https://github.com/tofuutils" target="_blank" rel="noopener noreferrer">Tofuutils</a> project, tenv is a Terraform and OpenTofu version manager that was created with today’s infrastructure workflows in mind. It provides the same core functionality you’d expect—installing, switching, and managing versions—but with native support for <strong>both Terraform and OpenTofu</strong>.</p>

<p>As HashiCorp’s licensing change prompted a surge of interest in OpenTofu, having a version manager that treats both tools as first-class citizens is a major advantage.</p>

<hr />

<p><strong>Feature comparison</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>Feature</strong></th>
      <th>tfenv</th>
      <th>tfswitch</th>
      <th>tenv</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Active development</strong></td>
      <td>❌ No</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Terraform support</strong></td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>OpenTofu support</strong></td>
      <td>⚠️ Workaround only</td>
      <td>❌ Not supported</td>
      <td>✅ Native support</td>
    </tr>
    <tr>
      <td><strong>Install specific version</strong></td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Use .terraform-version</strong></td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Interactive version selector</strong></td>
      <td>❌ No</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Cross-platform support</strong></td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Shell integration (bash/zsh)</strong></td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Custom install directory</strong></td>
      <td>✅ Yes</td>
      <td>❌ No</td>
      <td>✅ Yes</td>
    </tr>
    <tr>
      <td><strong>Multi-runtime support</strong></td>
      <td>❌ Terraform only</td>
      <td>❌ Terraform only</td>
      <td>✅ Terraform &amp; OpenTofu</td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="infrastructure" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/2025-03-24-comparing-terraform-version-management/tfenv-tfswitch-tenv.png" /><media:content medium="image" url="https://dkarim.com/assets/images/2025-03-24-comparing-terraform-version-management/tfenv-tfswitch-tenv.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Initial Configuration of a Dev Environment MacBook</title><link href="https://dkarim.com/macbook-setup-steps/" rel="alternate" type="text/html" title="Initial Configuration of a Dev Environment MacBook" /><published>2025-03-01T00:00:00-05:00</published><updated>2025-03-01T00:00:00-05:00</updated><id>https://dkarim.com/macbook-setup-steps</id><content type="html" xml:base="https://dkarim.com/macbook-setup-steps/"><![CDATA[<p><img src="/assets/images/2025-03-01-macbook-setup-steps/macbookpro_vscode.png" alt="" style="border-radius: 20px;" /></p>

<h2 id="introduction">Introduction</h2>

<p>After receiving a new MacBook, I usually follow a similar set of steps to get it ready as a development MacBook. Here, I show a list of all the tooling I install in order to get it most of the way there and also the files which should be preserved from one device to the next. This installation works best if performed in the sequence shown.</p>

<h2 id="steps">Steps</h2>

<p>The following steps were performed to configure MacBook Pro</p>

<ul>
  <li>Make sure XCode is installed, select the components you need:
    <ul>
      <li>macOS 15.x</li>
      <li>iOS 18.x</li>
    </ul>
  </li>
  <li>Install Chrome</li>
  <li>Install iTerm2. Make sure to also install shell integration which can be found in the iTerm2 main menu.</li>
  <li>Install brew
    <ul>
      <li>See here: <a href="https://brew.sh/">https://brew.sh/</a></li>
      <li>Homebrew should also install command line tools for Xcode</li>
    </ul>
  </li>
  <li>Install wget: <code class="language-plaintext highlighter-rouge">brew install wget</code></li>
  <li>Install oh-my-zsh
    <ul>
      <li><a href="https://github.com/ohmyzsh/ohmyzsh">See here</a></li>
    </ul>
  </li>
  <li>Install zsh autosuggestions:
    <ul>
      <li>https://github.com/zsh-users/zsh-autosuggestions</li>
      <li><code class="language-plaintext highlighter-rouge">brew install zsh-autosuggestions</code></li>
    </ul>
  </li>
  <li>Install powerlevel 10K
    <ul>
      <li><a href="https://github.com/romkatv/powerlevel10k">See here</a></li>
      <li>Install this plugin to add fonts and nice prompt. Use iterm2. Follow instructions for manual installation, this will install Meslo Nerd Font automatically through iTerm2.</li>
    </ul>
  </li>
  <li>Install FZF (fuzzy completion in terminal)
    <ul>
      <li><a href="https://github.com/junegunn/fzf">See here</a></li>
      <li>Use brew to install; then look in the readme for instructions on installing key bindings (such as those for fuzzy auto-completion for CTRL-R)</li>
      <li>To install useful key bindings and fuzzy completion (after installing fzf via brew):</li>
      <li><code class="language-plaintext highlighter-rouge">$(brew --prefix)/opt/fzf/install</code></li>
    </ul>
  </li>
  <li>Install zsh syntax highlighting
    <ul>
      <li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">See here</a></li>
      <li>Use brew to install: <code class="language-plaintext highlighter-rouge">brew install zsh-syntax-highlighting</code></li>
    </ul>
  </li>
  <li>Install VS Code</li>
  <li>Install Postgres from the website. Don’t use brew
    <ul>
      <li>Install through downloadable app <a href="https://postgresapp.com/downloads.html">here</a></li>
    </ul>
  </li>
  <li>Install DBeaver
    <ul>
      <li><a href="https://dbeaver.io/download/">See here</a></li>
    </ul>
  </li>
  <li>Install Docker
    <ul>
      <li><a href="https://docs.docker.com/desktop/setup/install/mac-install/">See here</a></li>
    </ul>
  </li>
  <li>Install bat using brew (bat is an improved version of cat command)</li>
  <li>Install node and npm using brew</li>
  <li>Install rbenv, Ruby, and bundler</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>rbenv
rbenv init
<span class="nb">echo</span> <span class="s1">'eval "$(rbenv init -)"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="c"># Install Ruby (version 3.2.2)</span>
rbenv <span class="nb">install </span>3.2.2 
rbenv global 3.2.2

<span class="c"># Install bundler</span>
gem <span class="nb">install </span>bundler:2.5.7
</code></pre></div></div>

<ul>
  <li>Make sure you have the .vimrc file which has syntax highlighting for vim and also starts NerdTree with the vim command.</li>
  <li>Install nerdtree:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sS</span> https://webi.sh/vim-nerdtree | sh<span class="p">;</span> <span class="se">\ </span><span class="nb">source</span> ~/.config/envman/PATH.env
</code></pre></div></div>

<ul>
  <li>If necessary, install Terraform using brew
    <ul>
      <li><a href="https://developer.hashicorp.com/terraform/install">See here</a></li>
    </ul>
  </li>
  <li>If necessary, install tfenv using brew
    <ul>
      <li><a href="https://github.com/tfutils/tfenv">Refer to repo</a></li>
    </ul>
  </li>
  <li>If necessary, install AWS CLI
    <ul>
      <li><a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">See here</a></li>
    </ul>
  </li>
</ul>

<h2 id="important-files-to-preserve">Important Files to Preserve</h2>

<p>If I am migrating from one device to another, I generally make sure the following files are moved over to the new device:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/.vimrc

<span class="c"># All SSH keys</span>
~/.ssh/

<span class="c"># The shell history</span>
~/.zsh_history

<span class="c"># I keep all shell alias commands in .alias_list</span>
~/.alias_list
</code></pre></div></div>]]></content><author><name></name></author><category term="instructional" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/2025-03-01-macbook-setup-steps/macbookpro_vscode.png" /><media:content medium="image" url="https://dkarim.com/assets/images/2025-03-01-macbook-setup-steps/macbookpro_vscode.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Web3 Smart Contracts</title><link href="https://dkarim.com/web3-smart-contracts/" rel="alternate" type="text/html" title="Web3 Smart Contracts" /><published>2024-12-01T07:00:00-05:00</published><updated>2024-12-01T07:00:00-05:00</updated><id>https://dkarim.com/web3-smart-contracts</id><content type="html" xml:base="https://dkarim.com/web3-smart-contracts/"><![CDATA[<p><img src="/assets/images/bocacontracts-main.png" alt="Alt text for the image" style="float: left; width: 400px; margin-right: 25px; margin-bottom: 10px;" /></p>

<p>Boca Contracts is a platform that allows anyone to deploy Web3 Smart Contracts based on a set of pre-defined templates. Anyone visiting the site can deploy a smart contract to any of several blockchains.</p>

<p>Boca Contracts is a NextJS application that is deployed on AWS via terraform. It is composed of EC2 instances, load balancers, and an RDS database.</p>

<p>The project is made up of the infrastructure code, the front end code, the application itself, and the Solidity contracts. For now, the application holds contracts in Ethereum (mainnet and Sepolia) and BNB Smart Chain.</p>

<p>The finished product can be seen here: <a href="https://bocacontracts.com" target="_blank" rel="noopener noreferrer">Boca Contracts Home Page</a></p>]]></content><author><name></name></author><category term="projects" /><category term="web3" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dkarim.com/assets/images/bocacontracts-main.png" /><media:content medium="image" url="https://dkarim.com/assets/images/bocacontracts-main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Small Business Marketing</title><link href="https://dkarim.com/small-business-marketing/" rel="alternate" type="text/html" title="Small Business Marketing" /><published>2024-11-15T07:00:00-05:00</published><updated>2024-11-15T07:00:00-05:00</updated><id>https://dkarim.com/small-business-marketing</id><content type="html" xml:base="https://dkarim.com/small-business-marketing/"><![CDATA[<p><img src="/assets/images/palmettodentist.png" alt="Alt text for the image" style="float: left; width: 400px; margin-right: 25px; margin-bottom: 10px;" /></p>

<p>Palmetto Dentist is a small business located in Boca Raton, Florida which specializes in dental implants and other dental services. I worked on their site, which serves mostly as a marketing presence and a landing page for occasional marketing campaigns.</p>

<p>I elected to host the site on AWS LightSail due to the low cost that it provides.</p>

<p>I used a templating app called Mobirise to help with the layout and then finished off the HTML by hand. I have also added several integrations with the Dental Office management platform to help schedule patients through the site directly.</p>

<p>The finished product can be seen here: <a href="https://palmettodentist.com" target="_blank" rel="noopener noreferrer">Palmetto Dentist Home Page</a></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">WordPress Migration</title><link href="https://dkarim.com/wordpress-migration/" rel="alternate" type="text/html" title="WordPress Migration" /><published>2024-11-01T08:00:00-04:00</published><updated>2024-11-01T08:00:00-04:00</updated><id>https://dkarim.com/wordpress-migration</id><content type="html" xml:base="https://dkarim.com/wordpress-migration/"><![CDATA[<p><img src="/assets/images/saintjohn.jpg" alt="Alt text for the image" style="float: left; width: 400px; margin-right: 25px; margin-bottom: 10px;" /></p>

<p>The Saint John website originally existed as a WordPress site that had not been updated in several years. The parish had attempted to create a more updated website but was trying to implement it using pure HTML and CSS without considering other factors. For example, they already had a company which provided WordPress hosting for them and would likely have difficulties changing their deployment, backup, and support processes. The church did not want to take on another provider or any additional expense.</p>

<p>I suggested to them that they could continue to use WordPress, but that it would likely be best to create a new site using more modern templates. I created a temporary WordPress server to create an initial mockup we could work with. After getting the main page and the menu structure in place, I had the hosting provider spin up a new WordPress site and I migrated the site over to their server while continuing to have the public DNS point to the old website.</p>

<p>Once the church was satisfied with the new site, we had the provider update the DNS to make the site go live. The new site implements features such as a Calendar of Events, announcements banner, and a background video which I recorded using a DJI drone. The finished product can be seen here: <a href="https://saintjohn-bocaraton.com" target="_blank" rel="noopener noreferrer">Saint John</a></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[]]></summary></entry></feed>